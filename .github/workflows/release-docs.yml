concurrency:
  cancel-in-progress: false

  group: Release Docs
jobs:
  update_and_deploy_docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: get_old_docs
    runs-on: ubuntu-latest
    steps:
      - name: get the current docs
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Save old docs
        run: tar -cvf /tmp/old-docs.tar ./docs/generated

      - name: Checkout src
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          clean: false #  doesn't seem to work?? - Hence use of tarballs

      - name: Restore old docs
        run: |
          mkdir -p ./docs/generated
          tar -xf /tmp/old-docs.tar ./docs/generated -C ./docs/generated

      - uses: ./.github/actions/prepare

      - name: Build docs
        run: pnpm run docs

      - name: Save new docs
        run: tar -cvf /tmp/new-docs.tar ./docs/generated

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/generated

      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - run: 'echo "PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: ''{ print $2 }'' | sed ''s/[", ]//g'')" >> $GITHUB_ENV'

      - name: Update Coverage Badge
        run: cp ./docs/generated/v$PACKAGE_VERSION/coverage.svg ./docs/coverage.svg

      - id: coverage_changed
        run: echo "coverage_changed=$(git status --porcelain -u | grep -c docs/coverage.svg)" >> "$GITHUB_OUTPUT"

      - env:
          COVERAGE_CHANGED: ${{ steps.coverage_changed.outputs.coverage_changed }}
          UP_TO_DATE: ${{ github.ref == 'refs/heads/main' }}
        id: push_coverage
        run: echo "push_coverage=$(if [[ "$COVERAGE_CHANGED" != '0' && "$UP_TO_DATE" == "true" ]] ; then echo '1' ; else echo '0' ; fi)" >> "$GITHUB_OUTPUT"

      - if: steps.push_coverage.outputs.push_coverage != '0'
        uses: ./.github/actions/unprotect-main
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - if: steps.push_coverage.outputs.push_coverage != '0'
        run: |
          git add docs/coverage.svg
          git commit -m "docs: update documentation coverage"
          git push

      - if: ${{ always() && steps.push_coverage.outputs.push_coverage != '0' }}
        uses: ./.github/actions/protect-main
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: get gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          clean: false #  doesn't seem to work?? - Hence use of tarballs

      - name: Restore new docs
        run: |
          rm -r ./docs/generated
          mkdir -p ./docs/generated
          tar -xf /tmp/new-docs.tar ./docs/generated -C ./docs/generated

      - name: Push new docs
        run: |
          git add -f docs/generated
          git commit -m "docs: update documentation"
          git push
        continue-on-error: true

      - name: Checkout src
        uses: actions/checkout@v3
