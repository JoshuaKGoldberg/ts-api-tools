concurrency:
  cancel-in-progress: true
  group: Release Docs

jobs:
  deploy_docs:
    runs-on: ubuntu-latest
    steps:
      - name: get gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Create a pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./docs/generated

      - id: deployment
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2

      - name: Store Coverage Badge
        run: cp ./docs/generated/stable/coverage.svg /tmp/coverage.svg

      - name: Checkout Main
        uses: actions/checkout@v3
        with:
          ref: main

      - uses: ./.github/actions/prepare

      - name: Update Coverage Badge
        run: cp /tmp/coverage.svg ./docs/coverage.svg

      - id: coverage_changed
        run: echo "coverage_changed=$(git status --porcelain -u | grep -c docs/coverage.svg)" >> "$GITHUB_OUTPUT"

      - env:
          COVERAGE_CHANGED: ${{ steps.coverage_changed.outputs.coverage_changed }}
        id: push_coverage
        run: echo "push_coverage=$(if [[ "$COVERAGE_CHANGED" != '0' ]] ; then echo '1' ; else echo '0' ; fi)" >> "$GITHUB_OUTPUT"

      - if: steps.push_coverage.outputs.push_coverage != '0'
        uses: ./.github/actions/unprotect-main
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - if: steps.push_coverage.outputs.push_coverage != '0'
        run: |
          git add docs/coverage.svg
          git commit -m "docs: update documentation coverage badge"
          git push

      - if: ${{ always() && steps.push_coverage.outputs.push_coverage != '0' }}
        uses: ./.github/actions/protect-main
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

name: Release Docs

on:
  push:
    branches:
      - gh-pages
  workflow_dispatch: ~

permissions:
  contents: write
  id-token: write
  pages: write
